"""Device package discovery utilities using the canonical CSV."""
from __future__ import annotations

from pathlib import Path
from typing import Dict, Tuple

from utils.csv_utils import read_apk_list
from utils.adb_utils import adb_runner
import utils.logging_utils.logging_engine as log


def list_packages(
    serial: str | None = None, apk_csv: str | Path = "apk_list.csv"
) -> Tuple[Dict[str, str], str]:
    """Return mapping of package names to APK paths and discovery source.

    Parameters
    ----------
    serial: str | None
        Device serial. Used when falling back to ADB probing.
    apk_csv: str | Path
        Path to the canonical ``apk_list.csv`` generated by discovery.

    Returns
    -------
    Tuple[Dict[str, str], str]
        Mapping of package name to APK path and the data source
        (``"csv"`` or ``"adb"``).
    """
    try:
        rows = read_apk_list(apk_csv)
    except OSError:
        log.warning("apk_list.csv missing; falling back to adb")
        result = adb_runner.run_adb_command(serial, ["pm", "list", "packages", "-f"], log_errors=False)
        packages: Dict[str, str] = {}
        if result.get("success"):
            for line in result.get("output", "").splitlines():
                if "=" in line:
                    path, pkg = line.split("=", 1)
                    packages[pkg.strip()] = path.strip()
        return packages, "adb"
    packages: Dict[str, str] = {}
    for row in rows:
        pkg = row.get("Package")
        if not pkg:
            continue
        packages[pkg] = row.get("APK_Path", "")
    return packages, "csv"
